{"ast":null,"code":"import _asyncToGenerator from \"/Users/macbookair/Documents/tcs assessment/PostsCommentsNg/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientModule } from '@angular/common/http';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      imports: [HttpClientModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create the app', () => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    expect(component).toBeTruthy();\n  });\n  it('Should fetch all the users', () => {\n    const mockUsers = [{\n      id: 1,\n      name: \"Leanne Graham\",\n      username: \"Bret\",\n      email: \"Sincere@april.biz\"\n    }];\n    spyOn(component.dataservice, 'getUsers').and.returnValue(of(mockUsers));\n    component.fetchUsers();\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should get error while fetching the users', () => {\n    const error = new Error();\n    spyOn(component.dataservice, 'getUsers').and.returnValue(of(error));\n    component.fetchUsers();\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should fetch posts by selected user', () => {\n    const mockPosts = [{\n      \"userId\": 1,\n      \"id\": 1,\n      \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n      \"body\": \"quia et\"\n    }];\n    spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(mockPosts));\n    const mockObj = {\n      \"id\": 1,\n      \"name\": \"Leanne Graham\",\n      \"username\": \"Bret\",\n      \"email\": \"Sincere@april.biz\"\n    };\n    component.fetchPost(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should get error while fetching posts by the selected users', () => {\n    const error = new Error();\n    spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(error));\n    const mockObj = {\n      \"id\": 1,\n      \"name\": \"Leanne Graham\",\n      \"username\": \"Bret\",\n      \"email\": \"Sincere@april.biz\"\n    };\n    component.fetchPost(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should fetch comments for the selected posts', () => {\n    const mockComments = [{\n      postId: 1 // id: 2,\n      // name: \"quo vero reiciendis velit similique earum\",\n      // email: \"Jayne_Kuhic@sydney.com\",\n      // body: \"est natus enim\"\n\n    }];\n    spyOn(component.dataservice, 'fetchComments').and.returnValue(of(mockComments));\n    const mockObj = {\n      \"userId\": 1,\n      \"id\": 1,\n      \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n      \"body\": \"quia et\"\n    };\n    component.fetchComments(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should get error while fetching comments for the selected posts', () => {\n    const error = new Error();\n    spyOn(component.dataservice, 'fetchComments').and.returnValue(of(error));\n    const mockObj = {\n      \"userId\": 1,\n      \"id\": 1,\n      \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n      \"body\": \"quia et\"\n    };\n    component.fetchComments(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should load all post when click on Load All button', () => {\n    component.loadAllPosts();\n    expect(component.loadAll).toBeTrue();\n  });\n});","map":{"version":3,"sources":["/Users/macbookair/Documents/tcs assessment/PostsCommentsNg/src/app/app.component.spec.ts"],"names":["HttpClientModule","TestBed","of","AppComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","mockUsers","id","name","username","email","spyOn","dataservice","and","returnValue","fetchUsers","isLoaded","toBeTrue","error","Error","mockPosts","mockObj","fetchPost","mockComments","postId","fetchComments","loadAllPosts","loadAll"],"mappings":"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","sourcesContent":["import { HttpClientModule } from '@angular/common/http';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [AppComponent],\n            imports: [HttpClientModule]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(AppComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create the app', () => {\n        fixture = TestBed.createComponent(AppComponent);\n        component = fixture.componentInstance;\n        expect(component).toBeTruthy();\n    });\n    it('Should fetch all the users', () => {\n        const mockUsers = [{ id: 1,\n                name: \"Leanne Graham\",\n                username: \"Bret\",\n                email: \"Sincere@april.biz\",\n            }];\n        spyOn(component.dataservice, 'getUsers').and.returnValue(of(mockUsers));\n        component.fetchUsers();\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should get error while fetching the users', () => {\n        const error = new Error();\n        spyOn(component.dataservice, 'getUsers').and.returnValue(of(error));\n        component.fetchUsers();\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should fetch posts by selected user', () => {\n        const mockPosts = [{ \"userId\": 1,\n                \"id\": 1,\n                \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n                \"body\": \"quia et\"\n            }];\n        spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(mockPosts));\n        const mockObj = { \"id\": 1,\n            \"name\": \"Leanne Graham\",\n            \"username\": \"Bret\",\n            \"email\": \"Sincere@april.biz\",\n        };\n        component.fetchPost(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should get error while fetching posts by the selected users', () => {\n        const error = new Error();\n        spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(error));\n        const mockObj = { \"id\": 1,\n            \"name\": \"Leanne Graham\",\n            \"username\": \"Bret\",\n            \"email\": \"Sincere@april.biz\",\n        };\n        component.fetchPost(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should fetch comments for the selected posts', () => {\n        const mockComments = [{ postId: 1,\n                // id: 2,\n                // name: \"quo vero reiciendis velit similique earum\",\n                // email: \"Jayne_Kuhic@sydney.com\",\n                // body: \"est natus enim\"\n            }];\n        spyOn(component.dataservice, 'fetchComments').and.returnValue(of(mockComments));\n        const mockObj = { \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et\",\n        };\n        component.fetchComments(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should get error while fetching comments for the selected posts', () => {\n        const error = new Error();\n        spyOn(component.dataservice, 'fetchComments').and.returnValue(of(error));\n        const mockObj = { \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et\",\n        };\n        component.fetchComments(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should load all post when click on Load All button', () => {\n        component.loadAllPosts();\n        expect(component.loadAll).toBeTrue();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}