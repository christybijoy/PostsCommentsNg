{"ast":null,"code":"import _asyncToGenerator from \"/Users/macbookair/Documents/tcs assessment/PostsCommentsNg/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientModule } from '@angular/common/http';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      imports: [HttpClientModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create the app', () => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    expect(component).toBeTruthy();\n  });\n  it('Should fetch all the users', () => {\n    spyOn(component.dataservice, 'getUsers').and.returnValue(of({}));\n    component.fetchUsers();\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should get error while fetching the users', () => {\n    spyOn(component.dataservice, 'getUsers').and.returnValue(of(Error));\n    component.fetchUsers();\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should fetch posts by selected user', () => {\n    spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of({}));\n    const mockObj = {\n      \"id\": 1,\n      \"name\": \"Leanne Graham\",\n      \"username\": \"Bret\",\n      \"email\": \"Sincere@april.biz\"\n    };\n    component.fetchPost(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should get error while fetching posts by the selected users', () => {\n    spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(Error));\n    const mockObj = {\n      \"id\": 1,\n      \"name\": \"Leanne Graham\",\n      \"username\": \"Bret\",\n      \"email\": \"Sincere@april.biz\"\n    };\n    component.fetchPost(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should fetch comments for the selected posts', () => {\n    spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of({}));\n    const mockObj = {\n      \"userId\": 1,\n      \"id\": 1,\n      \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n      \"body\": \"quia et\"\n    };\n    component.fetchComments(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n  it('Should get error while fetching comments for the selected posts', () => {\n    spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(Error));\n    const mockObj = {\n      \"userId\": 1,\n      \"id\": 1,\n      \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n      \"body\": \"quia et\"\n    };\n    component.fetchComments(mockObj);\n    expect(component.isLoaded).toBeTrue();\n  });\n});","map":{"version":3,"sources":["/Users/macbookair/Documents/tcs assessment/PostsCommentsNg/src/app/app.component.spec.ts"],"names":["HttpClientModule","TestBed","of","AppComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","spyOn","dataservice","and","returnValue","fetchUsers","isLoaded","toBeTrue","Error","mockObj","fetchPost","fetchComments"],"mappings":"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","sourcesContent":["import { HttpClientModule } from '@angular/common/http';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [AppComponent],\n            imports: [HttpClientModule]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(AppComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create the app', () => {\n        fixture = TestBed.createComponent(AppComponent);\n        component = fixture.componentInstance;\n        expect(component).toBeTruthy();\n    });\n    it('Should fetch all the users', () => {\n        spyOn(component.dataservice, 'getUsers').and.returnValue(of({}));\n        component.fetchUsers();\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should get error while fetching the users', () => {\n        spyOn(component.dataservice, 'getUsers').and.returnValue(of(Error));\n        component.fetchUsers();\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should fetch posts by selected user', () => {\n        spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of({}));\n        const mockObj = { \"id\": 1,\n            \"name\": \"Leanne Graham\",\n            \"username\": \"Bret\",\n            \"email\": \"Sincere@april.biz\",\n        };\n        component.fetchPost(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should get error while fetching posts by the selected users', () => {\n        spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(Error));\n        const mockObj = { \"id\": 1,\n            \"name\": \"Leanne Graham\",\n            \"username\": \"Bret\",\n            \"email\": \"Sincere@april.biz\",\n        };\n        component.fetchPost(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should fetch comments for the selected posts', () => {\n        spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of({}));\n        const mockObj = { \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et\",\n        };\n        component.fetchComments(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n    it('Should get error while fetching comments for the selected posts', () => {\n        spyOn(component.dataservice, 'fetchUserPost').and.returnValue(of(Error));\n        const mockObj = { \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et\",\n        };\n        component.fetchComments(mockObj);\n        expect(component.isLoaded).toBeTrue();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}